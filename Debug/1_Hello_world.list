
1_Hello_world.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bac  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000d30  08000d30  00010d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d3c  08000d3c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08000d3c  08000d3c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d3c  08000d3c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d3c  08000d3c  00010d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d40  08000d40  00010d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08000d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000008f1  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000002c6  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000118  00000000  00000000  00020c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000be  00000000  00000000  00020da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002b55  00000000  00000000  00020e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001448  00000000  00000000  000239b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009792  00000000  00000000  00024dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000009d0  00000000  00000000  0002e590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  0002ef60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000005c 	.word	0x2000005c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08000d18 	.word	0x08000d18

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000060 	.word	0x20000060
 80001c0:	08000d18 	.word	0x08000d18

080001c4 <main>:
 */
#include <stdio.h>
#include <stdint.h>

int main(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
	printf("Hello World\n");
 80001c8:	4801      	ldr	r0, [pc, #4]	; (80001d0 <main+0xc>)
 80001ca:	f000 fa0f 	bl	80005ec <puts>
    /* Loop forever */
	for(;;);
 80001ce:	e7fe      	b.n	80001ce <main+0xa>
 80001d0:	08000d30 	.word	0x08000d30

080001d4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80001de:	4b0f      	ldr	r3, [pc, #60]	; (800021c <ITM_SendChar+0x48>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a0e      	ldr	r2, [pc, #56]	; (800021c <ITM_SendChar+0x48>)
 80001e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001e8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80001ea:	4b0d      	ldr	r3, [pc, #52]	; (8000220 <ITM_SendChar+0x4c>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a0c      	ldr	r2, [pc, #48]	; (8000220 <ITM_SendChar+0x4c>)
 80001f0:	f043 0301 	orr.w	r3, r3, #1
 80001f4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80001f6:	bf00      	nop
 80001f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f003 0301 	and.w	r3, r3, #1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f8      	beq.n	80001f8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000206:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800020a:	79fb      	ldrb	r3, [r7, #7]
 800020c:	6013      	str	r3, [r2, #0]
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000edfc 	.word	0xe000edfc
 8000220:	e0000e00 	.word	0xe0000e00

08000224 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000230:	2300      	movs	r3, #0
 8000232:	617b      	str	r3, [r7, #20]
 8000234:	e00a      	b.n	800024c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000236:	f3af 8000 	nop.w
 800023a:	4601      	mov	r1, r0
 800023c:	68bb      	ldr	r3, [r7, #8]
 800023e:	1c5a      	adds	r2, r3, #1
 8000240:	60ba      	str	r2, [r7, #8]
 8000242:	b2ca      	uxtb	r2, r1
 8000244:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000246:	697b      	ldr	r3, [r7, #20]
 8000248:	3301      	adds	r3, #1
 800024a:	617b      	str	r3, [r7, #20]
 800024c:	697a      	ldr	r2, [r7, #20]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	429a      	cmp	r2, r3
 8000252:	dbf0      	blt.n	8000236 <_read+0x12>
  }

  return len;
 8000254:	687b      	ldr	r3, [r7, #4]
}
 8000256:	4618      	mov	r0, r3
 8000258:	3718      	adds	r7, #24
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}

0800025e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800025e:	b580      	push	{r7, lr}
 8000260:	b086      	sub	sp, #24
 8000262:	af00      	add	r7, sp, #0
 8000264:	60f8      	str	r0, [r7, #12]
 8000266:	60b9      	str	r1, [r7, #8]
 8000268:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800026a:	2300      	movs	r3, #0
 800026c:	617b      	str	r3, [r7, #20]
 800026e:	e009      	b.n	8000284 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	1c5a      	adds	r2, r3, #1
 8000274:	60ba      	str	r2, [r7, #8]
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	4618      	mov	r0, r3
 800027a:	f7ff ffab 	bl	80001d4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800027e:	697b      	ldr	r3, [r7, #20]
 8000280:	3301      	adds	r3, #1
 8000282:	617b      	str	r3, [r7, #20]
 8000284:	697a      	ldr	r2, [r7, #20]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	429a      	cmp	r2, r3
 800028a:	dbf1      	blt.n	8000270 <_write+0x12>
  }
  return len;
 800028c:	687b      	ldr	r3, [r7, #4]
}
 800028e:	4618      	mov	r0, r3
 8000290:	3718      	adds	r7, #24
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}

08000296 <_close>:

int _close(int file)
{
 8000296:	b480      	push	{r7}
 8000298:	b083      	sub	sp, #12
 800029a:	af00      	add	r7, sp, #0
 800029c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800029e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr

080002ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80002ae:	b480      	push	{r7}
 80002b0:	b083      	sub	sp, #12
 80002b2:	af00      	add	r7, sp, #0
 80002b4:	6078      	str	r0, [r7, #4]
 80002b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002be:	605a      	str	r2, [r3, #4]
  return 0;
 80002c0:	2300      	movs	r3, #0
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr

080002ce <_isatty>:

int _isatty(int file)
{
 80002ce:	b480      	push	{r7}
 80002d0:	b083      	sub	sp, #12
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80002d6:	2301      	movs	r3, #1
}
 80002d8:	4618      	mov	r0, r3
 80002da:	370c      	adds	r7, #12
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	60f8      	str	r0, [r7, #12]
 80002ec:	60b9      	str	r1, [r7, #8]
 80002ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80002f0:	2300      	movs	r3, #0
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3714      	adds	r7, #20
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
	...

08000300 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000308:	4a14      	ldr	r2, [pc, #80]	; (800035c <_sbrk+0x5c>)
 800030a:	4b15      	ldr	r3, [pc, #84]	; (8000360 <_sbrk+0x60>)
 800030c:	1ad3      	subs	r3, r2, r3
 800030e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000314:	4b13      	ldr	r3, [pc, #76]	; (8000364 <_sbrk+0x64>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d102      	bne.n	8000322 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800031c:	4b11      	ldr	r3, [pc, #68]	; (8000364 <_sbrk+0x64>)
 800031e:	4a12      	ldr	r2, [pc, #72]	; (8000368 <_sbrk+0x68>)
 8000320:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000322:	4b10      	ldr	r3, [pc, #64]	; (8000364 <_sbrk+0x64>)
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4413      	add	r3, r2
 800032a:	693a      	ldr	r2, [r7, #16]
 800032c:	429a      	cmp	r2, r3
 800032e:	d207      	bcs.n	8000340 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000330:	f000 fa8a 	bl	8000848 <__errno>
 8000334:	4603      	mov	r3, r0
 8000336:	220c      	movs	r2, #12
 8000338:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800033a:	f04f 33ff 	mov.w	r3, #4294967295
 800033e:	e009      	b.n	8000354 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000340:	4b08      	ldr	r3, [pc, #32]	; (8000364 <_sbrk+0x64>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000346:	4b07      	ldr	r3, [pc, #28]	; (8000364 <_sbrk+0x64>)
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4413      	add	r3, r2
 800034e:	4a05      	ldr	r2, [pc, #20]	; (8000364 <_sbrk+0x64>)
 8000350:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000352:	68fb      	ldr	r3, [r7, #12]
}
 8000354:	4618      	mov	r0, r3
 8000356:	3718      	adds	r7, #24
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20018000 	.word	0x20018000
 8000360:	00000400 	.word	0x00000400
 8000364:	20000078 	.word	0x20000078
 8000368:	200001c8 	.word	0x200001c8

0800036c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800036c:	480d      	ldr	r0, [pc, #52]	; (80003a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000370:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000374:	480c      	ldr	r0, [pc, #48]	; (80003a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000376:	490d      	ldr	r1, [pc, #52]	; (80003ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000378:	4a0d      	ldr	r2, [pc, #52]	; (80003b0 <LoopForever+0xe>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800037c:	e002      	b.n	8000384 <LoopCopyDataInit>

0800037e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000382:	3304      	adds	r3, #4

08000384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000388:	d3f9      	bcc.n	800037e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038a:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800038c:	4c0a      	ldr	r4, [pc, #40]	; (80003b8 <LoopForever+0x16>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000390:	e001      	b.n	8000396 <LoopFillZerobss>

08000392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000394:	3204      	adds	r2, #4

08000396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000398:	d3fb      	bcc.n	8000392 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800039a:	f000 fa5b 	bl	8000854 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039e:	f7ff ff11 	bl	80001c4 <main>

080003a2 <LoopForever>:

LoopForever:
  b LoopForever
 80003a2:	e7fe      	b.n	80003a2 <LoopForever>
  ldr   r0, =_estack
 80003a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80003b0:	08000d44 	.word	0x08000d44
  ldr r2, =_sbss
 80003b4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80003b8:	200001c8 	.word	0x200001c8

080003bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003bc:	e7fe      	b.n	80003bc <ADC1_2_IRQHandler>
	...

080003c0 <std>:
 80003c0:	2300      	movs	r3, #0
 80003c2:	b510      	push	{r4, lr}
 80003c4:	4604      	mov	r4, r0
 80003c6:	e9c0 3300 	strd	r3, r3, [r0]
 80003ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80003ce:	6083      	str	r3, [r0, #8]
 80003d0:	8181      	strh	r1, [r0, #12]
 80003d2:	6643      	str	r3, [r0, #100]	; 0x64
 80003d4:	81c2      	strh	r2, [r0, #14]
 80003d6:	6183      	str	r3, [r0, #24]
 80003d8:	4619      	mov	r1, r3
 80003da:	2208      	movs	r2, #8
 80003dc:	305c      	adds	r0, #92	; 0x5c
 80003de:	f000 f9e5 	bl	80007ac <memset>
 80003e2:	4b0d      	ldr	r3, [pc, #52]	; (8000418 <std+0x58>)
 80003e4:	6263      	str	r3, [r4, #36]	; 0x24
 80003e6:	4b0d      	ldr	r3, [pc, #52]	; (800041c <std+0x5c>)
 80003e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80003ea:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <std+0x60>)
 80003ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80003ee:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <std+0x64>)
 80003f0:	6323      	str	r3, [r4, #48]	; 0x30
 80003f2:	4b0d      	ldr	r3, [pc, #52]	; (8000428 <std+0x68>)
 80003f4:	6224      	str	r4, [r4, #32]
 80003f6:	429c      	cmp	r4, r3
 80003f8:	d006      	beq.n	8000408 <std+0x48>
 80003fa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80003fe:	4294      	cmp	r4, r2
 8000400:	d002      	beq.n	8000408 <std+0x48>
 8000402:	33d0      	adds	r3, #208	; 0xd0
 8000404:	429c      	cmp	r4, r3
 8000406:	d105      	bne.n	8000414 <std+0x54>
 8000408:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800040c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000410:	f000 ba44 	b.w	800089c <__retarget_lock_init_recursive>
 8000414:	bd10      	pop	{r4, pc}
 8000416:	bf00      	nop
 8000418:	080005fd 	.word	0x080005fd
 800041c:	0800061f 	.word	0x0800061f
 8000420:	08000657 	.word	0x08000657
 8000424:	0800067b 	.word	0x0800067b
 8000428:	2000007c 	.word	0x2000007c

0800042c <stdio_exit_handler>:
 800042c:	4a02      	ldr	r2, [pc, #8]	; (8000438 <stdio_exit_handler+0xc>)
 800042e:	4903      	ldr	r1, [pc, #12]	; (800043c <stdio_exit_handler+0x10>)
 8000430:	4803      	ldr	r0, [pc, #12]	; (8000440 <stdio_exit_handler+0x14>)
 8000432:	f000 b869 	b.w	8000508 <_fwalk_sglue>
 8000436:	bf00      	nop
 8000438:	20000000 	.word	0x20000000
 800043c:	08000ba1 	.word	0x08000ba1
 8000440:	2000000c 	.word	0x2000000c

08000444 <cleanup_stdio>:
 8000444:	6841      	ldr	r1, [r0, #4]
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <cleanup_stdio+0x34>)
 8000448:	4299      	cmp	r1, r3
 800044a:	b510      	push	{r4, lr}
 800044c:	4604      	mov	r4, r0
 800044e:	d001      	beq.n	8000454 <cleanup_stdio+0x10>
 8000450:	f000 fba6 	bl	8000ba0 <_fflush_r>
 8000454:	68a1      	ldr	r1, [r4, #8]
 8000456:	4b09      	ldr	r3, [pc, #36]	; (800047c <cleanup_stdio+0x38>)
 8000458:	4299      	cmp	r1, r3
 800045a:	d002      	beq.n	8000462 <cleanup_stdio+0x1e>
 800045c:	4620      	mov	r0, r4
 800045e:	f000 fb9f 	bl	8000ba0 <_fflush_r>
 8000462:	68e1      	ldr	r1, [r4, #12]
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <cleanup_stdio+0x3c>)
 8000466:	4299      	cmp	r1, r3
 8000468:	d004      	beq.n	8000474 <cleanup_stdio+0x30>
 800046a:	4620      	mov	r0, r4
 800046c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000470:	f000 bb96 	b.w	8000ba0 <_fflush_r>
 8000474:	bd10      	pop	{r4, pc}
 8000476:	bf00      	nop
 8000478:	2000007c 	.word	0x2000007c
 800047c:	200000e4 	.word	0x200000e4
 8000480:	2000014c 	.word	0x2000014c

08000484 <global_stdio_init.part.0>:
 8000484:	b510      	push	{r4, lr}
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <global_stdio_init.part.0+0x30>)
 8000488:	4c0b      	ldr	r4, [pc, #44]	; (80004b8 <global_stdio_init.part.0+0x34>)
 800048a:	4a0c      	ldr	r2, [pc, #48]	; (80004bc <global_stdio_init.part.0+0x38>)
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	4620      	mov	r0, r4
 8000490:	2200      	movs	r2, #0
 8000492:	2104      	movs	r1, #4
 8000494:	f7ff ff94 	bl	80003c0 <std>
 8000498:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800049c:	2201      	movs	r2, #1
 800049e:	2109      	movs	r1, #9
 80004a0:	f7ff ff8e 	bl	80003c0 <std>
 80004a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80004a8:	2202      	movs	r2, #2
 80004aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80004ae:	2112      	movs	r1, #18
 80004b0:	f7ff bf86 	b.w	80003c0 <std>
 80004b4:	200001b4 	.word	0x200001b4
 80004b8:	2000007c 	.word	0x2000007c
 80004bc:	0800042d 	.word	0x0800042d

080004c0 <__sfp_lock_acquire>:
 80004c0:	4801      	ldr	r0, [pc, #4]	; (80004c8 <__sfp_lock_acquire+0x8>)
 80004c2:	f000 b9ec 	b.w	800089e <__retarget_lock_acquire_recursive>
 80004c6:	bf00      	nop
 80004c8:	200001bd 	.word	0x200001bd

080004cc <__sfp_lock_release>:
 80004cc:	4801      	ldr	r0, [pc, #4]	; (80004d4 <__sfp_lock_release+0x8>)
 80004ce:	f000 b9e7 	b.w	80008a0 <__retarget_lock_release_recursive>
 80004d2:	bf00      	nop
 80004d4:	200001bd 	.word	0x200001bd

080004d8 <__sinit>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	4604      	mov	r4, r0
 80004dc:	f7ff fff0 	bl	80004c0 <__sfp_lock_acquire>
 80004e0:	6a23      	ldr	r3, [r4, #32]
 80004e2:	b11b      	cbz	r3, 80004ec <__sinit+0x14>
 80004e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80004e8:	f7ff bff0 	b.w	80004cc <__sfp_lock_release>
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <__sinit+0x28>)
 80004ee:	6223      	str	r3, [r4, #32]
 80004f0:	4b04      	ldr	r3, [pc, #16]	; (8000504 <__sinit+0x2c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d1f5      	bne.n	80004e4 <__sinit+0xc>
 80004f8:	f7ff ffc4 	bl	8000484 <global_stdio_init.part.0>
 80004fc:	e7f2      	b.n	80004e4 <__sinit+0xc>
 80004fe:	bf00      	nop
 8000500:	08000445 	.word	0x08000445
 8000504:	200001b4 	.word	0x200001b4

08000508 <_fwalk_sglue>:
 8000508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800050c:	4607      	mov	r7, r0
 800050e:	4688      	mov	r8, r1
 8000510:	4614      	mov	r4, r2
 8000512:	2600      	movs	r6, #0
 8000514:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000518:	f1b9 0901 	subs.w	r9, r9, #1
 800051c:	d505      	bpl.n	800052a <_fwalk_sglue+0x22>
 800051e:	6824      	ldr	r4, [r4, #0]
 8000520:	2c00      	cmp	r4, #0
 8000522:	d1f7      	bne.n	8000514 <_fwalk_sglue+0xc>
 8000524:	4630      	mov	r0, r6
 8000526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800052a:	89ab      	ldrh	r3, [r5, #12]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d907      	bls.n	8000540 <_fwalk_sglue+0x38>
 8000530:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000534:	3301      	adds	r3, #1
 8000536:	d003      	beq.n	8000540 <_fwalk_sglue+0x38>
 8000538:	4629      	mov	r1, r5
 800053a:	4638      	mov	r0, r7
 800053c:	47c0      	blx	r8
 800053e:	4306      	orrs	r6, r0
 8000540:	3568      	adds	r5, #104	; 0x68
 8000542:	e7e9      	b.n	8000518 <_fwalk_sglue+0x10>

08000544 <_puts_r>:
 8000544:	6a03      	ldr	r3, [r0, #32]
 8000546:	b570      	push	{r4, r5, r6, lr}
 8000548:	6884      	ldr	r4, [r0, #8]
 800054a:	4605      	mov	r5, r0
 800054c:	460e      	mov	r6, r1
 800054e:	b90b      	cbnz	r3, 8000554 <_puts_r+0x10>
 8000550:	f7ff ffc2 	bl	80004d8 <__sinit>
 8000554:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000556:	07db      	lsls	r3, r3, #31
 8000558:	d405      	bmi.n	8000566 <_puts_r+0x22>
 800055a:	89a3      	ldrh	r3, [r4, #12]
 800055c:	0598      	lsls	r0, r3, #22
 800055e:	d402      	bmi.n	8000566 <_puts_r+0x22>
 8000560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000562:	f000 f99c 	bl	800089e <__retarget_lock_acquire_recursive>
 8000566:	89a3      	ldrh	r3, [r4, #12]
 8000568:	0719      	lsls	r1, r3, #28
 800056a:	d513      	bpl.n	8000594 <_puts_r+0x50>
 800056c:	6923      	ldr	r3, [r4, #16]
 800056e:	b18b      	cbz	r3, 8000594 <_puts_r+0x50>
 8000570:	3e01      	subs	r6, #1
 8000572:	68a3      	ldr	r3, [r4, #8]
 8000574:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000578:	3b01      	subs	r3, #1
 800057a:	60a3      	str	r3, [r4, #8]
 800057c:	b9e9      	cbnz	r1, 80005ba <_puts_r+0x76>
 800057e:	2b00      	cmp	r3, #0
 8000580:	da2e      	bge.n	80005e0 <_puts_r+0x9c>
 8000582:	4622      	mov	r2, r4
 8000584:	210a      	movs	r1, #10
 8000586:	4628      	mov	r0, r5
 8000588:	f000 f87b 	bl	8000682 <__swbuf_r>
 800058c:	3001      	adds	r0, #1
 800058e:	d007      	beq.n	80005a0 <_puts_r+0x5c>
 8000590:	250a      	movs	r5, #10
 8000592:	e007      	b.n	80005a4 <_puts_r+0x60>
 8000594:	4621      	mov	r1, r4
 8000596:	4628      	mov	r0, r5
 8000598:	f000 f8b0 	bl	80006fc <__swsetup_r>
 800059c:	2800      	cmp	r0, #0
 800059e:	d0e7      	beq.n	8000570 <_puts_r+0x2c>
 80005a0:	f04f 35ff 	mov.w	r5, #4294967295
 80005a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80005a6:	07da      	lsls	r2, r3, #31
 80005a8:	d405      	bmi.n	80005b6 <_puts_r+0x72>
 80005aa:	89a3      	ldrh	r3, [r4, #12]
 80005ac:	059b      	lsls	r3, r3, #22
 80005ae:	d402      	bmi.n	80005b6 <_puts_r+0x72>
 80005b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80005b2:	f000 f975 	bl	80008a0 <__retarget_lock_release_recursive>
 80005b6:	4628      	mov	r0, r5
 80005b8:	bd70      	pop	{r4, r5, r6, pc}
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	da04      	bge.n	80005c8 <_puts_r+0x84>
 80005be:	69a2      	ldr	r2, [r4, #24]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	dc06      	bgt.n	80005d2 <_puts_r+0x8e>
 80005c4:	290a      	cmp	r1, #10
 80005c6:	d004      	beq.n	80005d2 <_puts_r+0x8e>
 80005c8:	6823      	ldr	r3, [r4, #0]
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	6022      	str	r2, [r4, #0]
 80005ce:	7019      	strb	r1, [r3, #0]
 80005d0:	e7cf      	b.n	8000572 <_puts_r+0x2e>
 80005d2:	4622      	mov	r2, r4
 80005d4:	4628      	mov	r0, r5
 80005d6:	f000 f854 	bl	8000682 <__swbuf_r>
 80005da:	3001      	adds	r0, #1
 80005dc:	d1c9      	bne.n	8000572 <_puts_r+0x2e>
 80005de:	e7df      	b.n	80005a0 <_puts_r+0x5c>
 80005e0:	6823      	ldr	r3, [r4, #0]
 80005e2:	250a      	movs	r5, #10
 80005e4:	1c5a      	adds	r2, r3, #1
 80005e6:	6022      	str	r2, [r4, #0]
 80005e8:	701d      	strb	r5, [r3, #0]
 80005ea:	e7db      	b.n	80005a4 <_puts_r+0x60>

080005ec <puts>:
 80005ec:	4b02      	ldr	r3, [pc, #8]	; (80005f8 <puts+0xc>)
 80005ee:	4601      	mov	r1, r0
 80005f0:	6818      	ldr	r0, [r3, #0]
 80005f2:	f7ff bfa7 	b.w	8000544 <_puts_r>
 80005f6:	bf00      	nop
 80005f8:	20000058 	.word	0x20000058

080005fc <__sread>:
 80005fc:	b510      	push	{r4, lr}
 80005fe:	460c      	mov	r4, r1
 8000600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000604:	f000 f8fc 	bl	8000800 <_read_r>
 8000608:	2800      	cmp	r0, #0
 800060a:	bfab      	itete	ge
 800060c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800060e:	89a3      	ldrhlt	r3, [r4, #12]
 8000610:	181b      	addge	r3, r3, r0
 8000612:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000616:	bfac      	ite	ge
 8000618:	6563      	strge	r3, [r4, #84]	; 0x54
 800061a:	81a3      	strhlt	r3, [r4, #12]
 800061c:	bd10      	pop	{r4, pc}

0800061e <__swrite>:
 800061e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000622:	461f      	mov	r7, r3
 8000624:	898b      	ldrh	r3, [r1, #12]
 8000626:	05db      	lsls	r3, r3, #23
 8000628:	4605      	mov	r5, r0
 800062a:	460c      	mov	r4, r1
 800062c:	4616      	mov	r6, r2
 800062e:	d505      	bpl.n	800063c <__swrite+0x1e>
 8000630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000634:	2302      	movs	r3, #2
 8000636:	2200      	movs	r2, #0
 8000638:	f000 f8d0 	bl	80007dc <_lseek_r>
 800063c:	89a3      	ldrh	r3, [r4, #12]
 800063e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000642:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000646:	81a3      	strh	r3, [r4, #12]
 8000648:	4632      	mov	r2, r6
 800064a:	463b      	mov	r3, r7
 800064c:	4628      	mov	r0, r5
 800064e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000652:	f000 b8e7 	b.w	8000824 <_write_r>

08000656 <__sseek>:
 8000656:	b510      	push	{r4, lr}
 8000658:	460c      	mov	r4, r1
 800065a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800065e:	f000 f8bd 	bl	80007dc <_lseek_r>
 8000662:	1c43      	adds	r3, r0, #1
 8000664:	89a3      	ldrh	r3, [r4, #12]
 8000666:	bf15      	itete	ne
 8000668:	6560      	strne	r0, [r4, #84]	; 0x54
 800066a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800066e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000672:	81a3      	strheq	r3, [r4, #12]
 8000674:	bf18      	it	ne
 8000676:	81a3      	strhne	r3, [r4, #12]
 8000678:	bd10      	pop	{r4, pc}

0800067a <__sclose>:
 800067a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800067e:	f000 b89d 	b.w	80007bc <_close_r>

08000682 <__swbuf_r>:
 8000682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000684:	460e      	mov	r6, r1
 8000686:	4614      	mov	r4, r2
 8000688:	4605      	mov	r5, r0
 800068a:	b118      	cbz	r0, 8000694 <__swbuf_r+0x12>
 800068c:	6a03      	ldr	r3, [r0, #32]
 800068e:	b90b      	cbnz	r3, 8000694 <__swbuf_r+0x12>
 8000690:	f7ff ff22 	bl	80004d8 <__sinit>
 8000694:	69a3      	ldr	r3, [r4, #24]
 8000696:	60a3      	str	r3, [r4, #8]
 8000698:	89a3      	ldrh	r3, [r4, #12]
 800069a:	071a      	lsls	r2, r3, #28
 800069c:	d525      	bpl.n	80006ea <__swbuf_r+0x68>
 800069e:	6923      	ldr	r3, [r4, #16]
 80006a0:	b31b      	cbz	r3, 80006ea <__swbuf_r+0x68>
 80006a2:	6823      	ldr	r3, [r4, #0]
 80006a4:	6922      	ldr	r2, [r4, #16]
 80006a6:	1a98      	subs	r0, r3, r2
 80006a8:	6963      	ldr	r3, [r4, #20]
 80006aa:	b2f6      	uxtb	r6, r6
 80006ac:	4283      	cmp	r3, r0
 80006ae:	4637      	mov	r7, r6
 80006b0:	dc04      	bgt.n	80006bc <__swbuf_r+0x3a>
 80006b2:	4621      	mov	r1, r4
 80006b4:	4628      	mov	r0, r5
 80006b6:	f000 fa73 	bl	8000ba0 <_fflush_r>
 80006ba:	b9e0      	cbnz	r0, 80006f6 <__swbuf_r+0x74>
 80006bc:	68a3      	ldr	r3, [r4, #8]
 80006be:	3b01      	subs	r3, #1
 80006c0:	60a3      	str	r3, [r4, #8]
 80006c2:	6823      	ldr	r3, [r4, #0]
 80006c4:	1c5a      	adds	r2, r3, #1
 80006c6:	6022      	str	r2, [r4, #0]
 80006c8:	701e      	strb	r6, [r3, #0]
 80006ca:	6962      	ldr	r2, [r4, #20]
 80006cc:	1c43      	adds	r3, r0, #1
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d004      	beq.n	80006dc <__swbuf_r+0x5a>
 80006d2:	89a3      	ldrh	r3, [r4, #12]
 80006d4:	07db      	lsls	r3, r3, #31
 80006d6:	d506      	bpl.n	80006e6 <__swbuf_r+0x64>
 80006d8:	2e0a      	cmp	r6, #10
 80006da:	d104      	bne.n	80006e6 <__swbuf_r+0x64>
 80006dc:	4621      	mov	r1, r4
 80006de:	4628      	mov	r0, r5
 80006e0:	f000 fa5e 	bl	8000ba0 <_fflush_r>
 80006e4:	b938      	cbnz	r0, 80006f6 <__swbuf_r+0x74>
 80006e6:	4638      	mov	r0, r7
 80006e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006ea:	4621      	mov	r1, r4
 80006ec:	4628      	mov	r0, r5
 80006ee:	f000 f805 	bl	80006fc <__swsetup_r>
 80006f2:	2800      	cmp	r0, #0
 80006f4:	d0d5      	beq.n	80006a2 <__swbuf_r+0x20>
 80006f6:	f04f 37ff 	mov.w	r7, #4294967295
 80006fa:	e7f4      	b.n	80006e6 <__swbuf_r+0x64>

080006fc <__swsetup_r>:
 80006fc:	b538      	push	{r3, r4, r5, lr}
 80006fe:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <__swsetup_r+0xac>)
 8000700:	4605      	mov	r5, r0
 8000702:	6818      	ldr	r0, [r3, #0]
 8000704:	460c      	mov	r4, r1
 8000706:	b118      	cbz	r0, 8000710 <__swsetup_r+0x14>
 8000708:	6a03      	ldr	r3, [r0, #32]
 800070a:	b90b      	cbnz	r3, 8000710 <__swsetup_r+0x14>
 800070c:	f7ff fee4 	bl	80004d8 <__sinit>
 8000710:	89a3      	ldrh	r3, [r4, #12]
 8000712:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000716:	0718      	lsls	r0, r3, #28
 8000718:	d422      	bmi.n	8000760 <__swsetup_r+0x64>
 800071a:	06d9      	lsls	r1, r3, #27
 800071c:	d407      	bmi.n	800072e <__swsetup_r+0x32>
 800071e:	2309      	movs	r3, #9
 8000720:	602b      	str	r3, [r5, #0]
 8000722:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000726:	81a3      	strh	r3, [r4, #12]
 8000728:	f04f 30ff 	mov.w	r0, #4294967295
 800072c:	e034      	b.n	8000798 <__swsetup_r+0x9c>
 800072e:	0758      	lsls	r0, r3, #29
 8000730:	d512      	bpl.n	8000758 <__swsetup_r+0x5c>
 8000732:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000734:	b141      	cbz	r1, 8000748 <__swsetup_r+0x4c>
 8000736:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800073a:	4299      	cmp	r1, r3
 800073c:	d002      	beq.n	8000744 <__swsetup_r+0x48>
 800073e:	4628      	mov	r0, r5
 8000740:	f000 f8b0 	bl	80008a4 <_free_r>
 8000744:	2300      	movs	r3, #0
 8000746:	6363      	str	r3, [r4, #52]	; 0x34
 8000748:	89a3      	ldrh	r3, [r4, #12]
 800074a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800074e:	81a3      	strh	r3, [r4, #12]
 8000750:	2300      	movs	r3, #0
 8000752:	6063      	str	r3, [r4, #4]
 8000754:	6923      	ldr	r3, [r4, #16]
 8000756:	6023      	str	r3, [r4, #0]
 8000758:	89a3      	ldrh	r3, [r4, #12]
 800075a:	f043 0308 	orr.w	r3, r3, #8
 800075e:	81a3      	strh	r3, [r4, #12]
 8000760:	6923      	ldr	r3, [r4, #16]
 8000762:	b94b      	cbnz	r3, 8000778 <__swsetup_r+0x7c>
 8000764:	89a3      	ldrh	r3, [r4, #12]
 8000766:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800076a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800076e:	d003      	beq.n	8000778 <__swsetup_r+0x7c>
 8000770:	4621      	mov	r1, r4
 8000772:	4628      	mov	r0, r5
 8000774:	f000 fa62 	bl	8000c3c <__smakebuf_r>
 8000778:	89a0      	ldrh	r0, [r4, #12]
 800077a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800077e:	f010 0301 	ands.w	r3, r0, #1
 8000782:	d00a      	beq.n	800079a <__swsetup_r+0x9e>
 8000784:	2300      	movs	r3, #0
 8000786:	60a3      	str	r3, [r4, #8]
 8000788:	6963      	ldr	r3, [r4, #20]
 800078a:	425b      	negs	r3, r3
 800078c:	61a3      	str	r3, [r4, #24]
 800078e:	6923      	ldr	r3, [r4, #16]
 8000790:	b943      	cbnz	r3, 80007a4 <__swsetup_r+0xa8>
 8000792:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000796:	d1c4      	bne.n	8000722 <__swsetup_r+0x26>
 8000798:	bd38      	pop	{r3, r4, r5, pc}
 800079a:	0781      	lsls	r1, r0, #30
 800079c:	bf58      	it	pl
 800079e:	6963      	ldrpl	r3, [r4, #20]
 80007a0:	60a3      	str	r3, [r4, #8]
 80007a2:	e7f4      	b.n	800078e <__swsetup_r+0x92>
 80007a4:	2000      	movs	r0, #0
 80007a6:	e7f7      	b.n	8000798 <__swsetup_r+0x9c>
 80007a8:	20000058 	.word	0x20000058

080007ac <memset>:
 80007ac:	4402      	add	r2, r0
 80007ae:	4603      	mov	r3, r0
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d100      	bne.n	80007b6 <memset+0xa>
 80007b4:	4770      	bx	lr
 80007b6:	f803 1b01 	strb.w	r1, [r3], #1
 80007ba:	e7f9      	b.n	80007b0 <memset+0x4>

080007bc <_close_r>:
 80007bc:	b538      	push	{r3, r4, r5, lr}
 80007be:	4d06      	ldr	r5, [pc, #24]	; (80007d8 <_close_r+0x1c>)
 80007c0:	2300      	movs	r3, #0
 80007c2:	4604      	mov	r4, r0
 80007c4:	4608      	mov	r0, r1
 80007c6:	602b      	str	r3, [r5, #0]
 80007c8:	f7ff fd65 	bl	8000296 <_close>
 80007cc:	1c43      	adds	r3, r0, #1
 80007ce:	d102      	bne.n	80007d6 <_close_r+0x1a>
 80007d0:	682b      	ldr	r3, [r5, #0]
 80007d2:	b103      	cbz	r3, 80007d6 <_close_r+0x1a>
 80007d4:	6023      	str	r3, [r4, #0]
 80007d6:	bd38      	pop	{r3, r4, r5, pc}
 80007d8:	200001b8 	.word	0x200001b8

080007dc <_lseek_r>:
 80007dc:	b538      	push	{r3, r4, r5, lr}
 80007de:	4d07      	ldr	r5, [pc, #28]	; (80007fc <_lseek_r+0x20>)
 80007e0:	4604      	mov	r4, r0
 80007e2:	4608      	mov	r0, r1
 80007e4:	4611      	mov	r1, r2
 80007e6:	2200      	movs	r2, #0
 80007e8:	602a      	str	r2, [r5, #0]
 80007ea:	461a      	mov	r2, r3
 80007ec:	f7ff fd7a 	bl	80002e4 <_lseek>
 80007f0:	1c43      	adds	r3, r0, #1
 80007f2:	d102      	bne.n	80007fa <_lseek_r+0x1e>
 80007f4:	682b      	ldr	r3, [r5, #0]
 80007f6:	b103      	cbz	r3, 80007fa <_lseek_r+0x1e>
 80007f8:	6023      	str	r3, [r4, #0]
 80007fa:	bd38      	pop	{r3, r4, r5, pc}
 80007fc:	200001b8 	.word	0x200001b8

08000800 <_read_r>:
 8000800:	b538      	push	{r3, r4, r5, lr}
 8000802:	4d07      	ldr	r5, [pc, #28]	; (8000820 <_read_r+0x20>)
 8000804:	4604      	mov	r4, r0
 8000806:	4608      	mov	r0, r1
 8000808:	4611      	mov	r1, r2
 800080a:	2200      	movs	r2, #0
 800080c:	602a      	str	r2, [r5, #0]
 800080e:	461a      	mov	r2, r3
 8000810:	f7ff fd08 	bl	8000224 <_read>
 8000814:	1c43      	adds	r3, r0, #1
 8000816:	d102      	bne.n	800081e <_read_r+0x1e>
 8000818:	682b      	ldr	r3, [r5, #0]
 800081a:	b103      	cbz	r3, 800081e <_read_r+0x1e>
 800081c:	6023      	str	r3, [r4, #0]
 800081e:	bd38      	pop	{r3, r4, r5, pc}
 8000820:	200001b8 	.word	0x200001b8

08000824 <_write_r>:
 8000824:	b538      	push	{r3, r4, r5, lr}
 8000826:	4d07      	ldr	r5, [pc, #28]	; (8000844 <_write_r+0x20>)
 8000828:	4604      	mov	r4, r0
 800082a:	4608      	mov	r0, r1
 800082c:	4611      	mov	r1, r2
 800082e:	2200      	movs	r2, #0
 8000830:	602a      	str	r2, [r5, #0]
 8000832:	461a      	mov	r2, r3
 8000834:	f7ff fd13 	bl	800025e <_write>
 8000838:	1c43      	adds	r3, r0, #1
 800083a:	d102      	bne.n	8000842 <_write_r+0x1e>
 800083c:	682b      	ldr	r3, [r5, #0]
 800083e:	b103      	cbz	r3, 8000842 <_write_r+0x1e>
 8000840:	6023      	str	r3, [r4, #0]
 8000842:	bd38      	pop	{r3, r4, r5, pc}
 8000844:	200001b8 	.word	0x200001b8

08000848 <__errno>:
 8000848:	4b01      	ldr	r3, [pc, #4]	; (8000850 <__errno+0x8>)
 800084a:	6818      	ldr	r0, [r3, #0]
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000058 	.word	0x20000058

08000854 <__libc_init_array>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	4d0d      	ldr	r5, [pc, #52]	; (800088c <__libc_init_array+0x38>)
 8000858:	4c0d      	ldr	r4, [pc, #52]	; (8000890 <__libc_init_array+0x3c>)
 800085a:	1b64      	subs	r4, r4, r5
 800085c:	10a4      	asrs	r4, r4, #2
 800085e:	2600      	movs	r6, #0
 8000860:	42a6      	cmp	r6, r4
 8000862:	d109      	bne.n	8000878 <__libc_init_array+0x24>
 8000864:	4d0b      	ldr	r5, [pc, #44]	; (8000894 <__libc_init_array+0x40>)
 8000866:	4c0c      	ldr	r4, [pc, #48]	; (8000898 <__libc_init_array+0x44>)
 8000868:	f000 fa56 	bl	8000d18 <_init>
 800086c:	1b64      	subs	r4, r4, r5
 800086e:	10a4      	asrs	r4, r4, #2
 8000870:	2600      	movs	r6, #0
 8000872:	42a6      	cmp	r6, r4
 8000874:	d105      	bne.n	8000882 <__libc_init_array+0x2e>
 8000876:	bd70      	pop	{r4, r5, r6, pc}
 8000878:	f855 3b04 	ldr.w	r3, [r5], #4
 800087c:	4798      	blx	r3
 800087e:	3601      	adds	r6, #1
 8000880:	e7ee      	b.n	8000860 <__libc_init_array+0xc>
 8000882:	f855 3b04 	ldr.w	r3, [r5], #4
 8000886:	4798      	blx	r3
 8000888:	3601      	adds	r6, #1
 800088a:	e7f2      	b.n	8000872 <__libc_init_array+0x1e>
 800088c:	08000d3c 	.word	0x08000d3c
 8000890:	08000d3c 	.word	0x08000d3c
 8000894:	08000d3c 	.word	0x08000d3c
 8000898:	08000d40 	.word	0x08000d40

0800089c <__retarget_lock_init_recursive>:
 800089c:	4770      	bx	lr

0800089e <__retarget_lock_acquire_recursive>:
 800089e:	4770      	bx	lr

080008a0 <__retarget_lock_release_recursive>:
 80008a0:	4770      	bx	lr
	...

080008a4 <_free_r>:
 80008a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80008a6:	2900      	cmp	r1, #0
 80008a8:	d044      	beq.n	8000934 <_free_r+0x90>
 80008aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80008ae:	9001      	str	r0, [sp, #4]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	f1a1 0404 	sub.w	r4, r1, #4
 80008b6:	bfb8      	it	lt
 80008b8:	18e4      	addlt	r4, r4, r3
 80008ba:	f000 f8df 	bl	8000a7c <__malloc_lock>
 80008be:	4a1e      	ldr	r2, [pc, #120]	; (8000938 <_free_r+0x94>)
 80008c0:	9801      	ldr	r0, [sp, #4]
 80008c2:	6813      	ldr	r3, [r2, #0]
 80008c4:	b933      	cbnz	r3, 80008d4 <_free_r+0x30>
 80008c6:	6063      	str	r3, [r4, #4]
 80008c8:	6014      	str	r4, [r2, #0]
 80008ca:	b003      	add	sp, #12
 80008cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80008d0:	f000 b8da 	b.w	8000a88 <__malloc_unlock>
 80008d4:	42a3      	cmp	r3, r4
 80008d6:	d908      	bls.n	80008ea <_free_r+0x46>
 80008d8:	6825      	ldr	r5, [r4, #0]
 80008da:	1961      	adds	r1, r4, r5
 80008dc:	428b      	cmp	r3, r1
 80008de:	bf01      	itttt	eq
 80008e0:	6819      	ldreq	r1, [r3, #0]
 80008e2:	685b      	ldreq	r3, [r3, #4]
 80008e4:	1949      	addeq	r1, r1, r5
 80008e6:	6021      	streq	r1, [r4, #0]
 80008e8:	e7ed      	b.n	80008c6 <_free_r+0x22>
 80008ea:	461a      	mov	r2, r3
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	b10b      	cbz	r3, 80008f4 <_free_r+0x50>
 80008f0:	42a3      	cmp	r3, r4
 80008f2:	d9fa      	bls.n	80008ea <_free_r+0x46>
 80008f4:	6811      	ldr	r1, [r2, #0]
 80008f6:	1855      	adds	r5, r2, r1
 80008f8:	42a5      	cmp	r5, r4
 80008fa:	d10b      	bne.n	8000914 <_free_r+0x70>
 80008fc:	6824      	ldr	r4, [r4, #0]
 80008fe:	4421      	add	r1, r4
 8000900:	1854      	adds	r4, r2, r1
 8000902:	42a3      	cmp	r3, r4
 8000904:	6011      	str	r1, [r2, #0]
 8000906:	d1e0      	bne.n	80008ca <_free_r+0x26>
 8000908:	681c      	ldr	r4, [r3, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	6053      	str	r3, [r2, #4]
 800090e:	440c      	add	r4, r1
 8000910:	6014      	str	r4, [r2, #0]
 8000912:	e7da      	b.n	80008ca <_free_r+0x26>
 8000914:	d902      	bls.n	800091c <_free_r+0x78>
 8000916:	230c      	movs	r3, #12
 8000918:	6003      	str	r3, [r0, #0]
 800091a:	e7d6      	b.n	80008ca <_free_r+0x26>
 800091c:	6825      	ldr	r5, [r4, #0]
 800091e:	1961      	adds	r1, r4, r5
 8000920:	428b      	cmp	r3, r1
 8000922:	bf04      	itt	eq
 8000924:	6819      	ldreq	r1, [r3, #0]
 8000926:	685b      	ldreq	r3, [r3, #4]
 8000928:	6063      	str	r3, [r4, #4]
 800092a:	bf04      	itt	eq
 800092c:	1949      	addeq	r1, r1, r5
 800092e:	6021      	streq	r1, [r4, #0]
 8000930:	6054      	str	r4, [r2, #4]
 8000932:	e7ca      	b.n	80008ca <_free_r+0x26>
 8000934:	b003      	add	sp, #12
 8000936:	bd30      	pop	{r4, r5, pc}
 8000938:	200001c0 	.word	0x200001c0

0800093c <sbrk_aligned>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	4e0e      	ldr	r6, [pc, #56]	; (8000978 <sbrk_aligned+0x3c>)
 8000940:	460c      	mov	r4, r1
 8000942:	6831      	ldr	r1, [r6, #0]
 8000944:	4605      	mov	r5, r0
 8000946:	b911      	cbnz	r1, 800094e <sbrk_aligned+0x12>
 8000948:	f000 f9d6 	bl	8000cf8 <_sbrk_r>
 800094c:	6030      	str	r0, [r6, #0]
 800094e:	4621      	mov	r1, r4
 8000950:	4628      	mov	r0, r5
 8000952:	f000 f9d1 	bl	8000cf8 <_sbrk_r>
 8000956:	1c43      	adds	r3, r0, #1
 8000958:	d00a      	beq.n	8000970 <sbrk_aligned+0x34>
 800095a:	1cc4      	adds	r4, r0, #3
 800095c:	f024 0403 	bic.w	r4, r4, #3
 8000960:	42a0      	cmp	r0, r4
 8000962:	d007      	beq.n	8000974 <sbrk_aligned+0x38>
 8000964:	1a21      	subs	r1, r4, r0
 8000966:	4628      	mov	r0, r5
 8000968:	f000 f9c6 	bl	8000cf8 <_sbrk_r>
 800096c:	3001      	adds	r0, #1
 800096e:	d101      	bne.n	8000974 <sbrk_aligned+0x38>
 8000970:	f04f 34ff 	mov.w	r4, #4294967295
 8000974:	4620      	mov	r0, r4
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	200001c4 	.word	0x200001c4

0800097c <_malloc_r>:
 800097c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000980:	1ccd      	adds	r5, r1, #3
 8000982:	f025 0503 	bic.w	r5, r5, #3
 8000986:	3508      	adds	r5, #8
 8000988:	2d0c      	cmp	r5, #12
 800098a:	bf38      	it	cc
 800098c:	250c      	movcc	r5, #12
 800098e:	2d00      	cmp	r5, #0
 8000990:	4607      	mov	r7, r0
 8000992:	db01      	blt.n	8000998 <_malloc_r+0x1c>
 8000994:	42a9      	cmp	r1, r5
 8000996:	d905      	bls.n	80009a4 <_malloc_r+0x28>
 8000998:	230c      	movs	r3, #12
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	2600      	movs	r6, #0
 800099e:	4630      	mov	r0, r6
 80009a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000a78 <_malloc_r+0xfc>
 80009a8:	f000 f868 	bl	8000a7c <__malloc_lock>
 80009ac:	f8d8 3000 	ldr.w	r3, [r8]
 80009b0:	461c      	mov	r4, r3
 80009b2:	bb5c      	cbnz	r4, 8000a0c <_malloc_r+0x90>
 80009b4:	4629      	mov	r1, r5
 80009b6:	4638      	mov	r0, r7
 80009b8:	f7ff ffc0 	bl	800093c <sbrk_aligned>
 80009bc:	1c43      	adds	r3, r0, #1
 80009be:	4604      	mov	r4, r0
 80009c0:	d155      	bne.n	8000a6e <_malloc_r+0xf2>
 80009c2:	f8d8 4000 	ldr.w	r4, [r8]
 80009c6:	4626      	mov	r6, r4
 80009c8:	2e00      	cmp	r6, #0
 80009ca:	d145      	bne.n	8000a58 <_malloc_r+0xdc>
 80009cc:	2c00      	cmp	r4, #0
 80009ce:	d048      	beq.n	8000a62 <_malloc_r+0xe6>
 80009d0:	6823      	ldr	r3, [r4, #0]
 80009d2:	4631      	mov	r1, r6
 80009d4:	4638      	mov	r0, r7
 80009d6:	eb04 0903 	add.w	r9, r4, r3
 80009da:	f000 f98d 	bl	8000cf8 <_sbrk_r>
 80009de:	4581      	cmp	r9, r0
 80009e0:	d13f      	bne.n	8000a62 <_malloc_r+0xe6>
 80009e2:	6821      	ldr	r1, [r4, #0]
 80009e4:	1a6d      	subs	r5, r5, r1
 80009e6:	4629      	mov	r1, r5
 80009e8:	4638      	mov	r0, r7
 80009ea:	f7ff ffa7 	bl	800093c <sbrk_aligned>
 80009ee:	3001      	adds	r0, #1
 80009f0:	d037      	beq.n	8000a62 <_malloc_r+0xe6>
 80009f2:	6823      	ldr	r3, [r4, #0]
 80009f4:	442b      	add	r3, r5
 80009f6:	6023      	str	r3, [r4, #0]
 80009f8:	f8d8 3000 	ldr.w	r3, [r8]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d038      	beq.n	8000a72 <_malloc_r+0xf6>
 8000a00:	685a      	ldr	r2, [r3, #4]
 8000a02:	42a2      	cmp	r2, r4
 8000a04:	d12b      	bne.n	8000a5e <_malloc_r+0xe2>
 8000a06:	2200      	movs	r2, #0
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	e00f      	b.n	8000a2c <_malloc_r+0xb0>
 8000a0c:	6822      	ldr	r2, [r4, #0]
 8000a0e:	1b52      	subs	r2, r2, r5
 8000a10:	d41f      	bmi.n	8000a52 <_malloc_r+0xd6>
 8000a12:	2a0b      	cmp	r2, #11
 8000a14:	d917      	bls.n	8000a46 <_malloc_r+0xca>
 8000a16:	1961      	adds	r1, r4, r5
 8000a18:	42a3      	cmp	r3, r4
 8000a1a:	6025      	str	r5, [r4, #0]
 8000a1c:	bf18      	it	ne
 8000a1e:	6059      	strne	r1, [r3, #4]
 8000a20:	6863      	ldr	r3, [r4, #4]
 8000a22:	bf08      	it	eq
 8000a24:	f8c8 1000 	streq.w	r1, [r8]
 8000a28:	5162      	str	r2, [r4, r5]
 8000a2a:	604b      	str	r3, [r1, #4]
 8000a2c:	4638      	mov	r0, r7
 8000a2e:	f104 060b 	add.w	r6, r4, #11
 8000a32:	f000 f829 	bl	8000a88 <__malloc_unlock>
 8000a36:	f026 0607 	bic.w	r6, r6, #7
 8000a3a:	1d23      	adds	r3, r4, #4
 8000a3c:	1af2      	subs	r2, r6, r3
 8000a3e:	d0ae      	beq.n	800099e <_malloc_r+0x22>
 8000a40:	1b9b      	subs	r3, r3, r6
 8000a42:	50a3      	str	r3, [r4, r2]
 8000a44:	e7ab      	b.n	800099e <_malloc_r+0x22>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	6862      	ldr	r2, [r4, #4]
 8000a4a:	d1dd      	bne.n	8000a08 <_malloc_r+0x8c>
 8000a4c:	f8c8 2000 	str.w	r2, [r8]
 8000a50:	e7ec      	b.n	8000a2c <_malloc_r+0xb0>
 8000a52:	4623      	mov	r3, r4
 8000a54:	6864      	ldr	r4, [r4, #4]
 8000a56:	e7ac      	b.n	80009b2 <_malloc_r+0x36>
 8000a58:	4634      	mov	r4, r6
 8000a5a:	6876      	ldr	r6, [r6, #4]
 8000a5c:	e7b4      	b.n	80009c8 <_malloc_r+0x4c>
 8000a5e:	4613      	mov	r3, r2
 8000a60:	e7cc      	b.n	80009fc <_malloc_r+0x80>
 8000a62:	230c      	movs	r3, #12
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	4638      	mov	r0, r7
 8000a68:	f000 f80e 	bl	8000a88 <__malloc_unlock>
 8000a6c:	e797      	b.n	800099e <_malloc_r+0x22>
 8000a6e:	6025      	str	r5, [r4, #0]
 8000a70:	e7dc      	b.n	8000a2c <_malloc_r+0xb0>
 8000a72:	605b      	str	r3, [r3, #4]
 8000a74:	deff      	udf	#255	; 0xff
 8000a76:	bf00      	nop
 8000a78:	200001c0 	.word	0x200001c0

08000a7c <__malloc_lock>:
 8000a7c:	4801      	ldr	r0, [pc, #4]	; (8000a84 <__malloc_lock+0x8>)
 8000a7e:	f7ff bf0e 	b.w	800089e <__retarget_lock_acquire_recursive>
 8000a82:	bf00      	nop
 8000a84:	200001bc 	.word	0x200001bc

08000a88 <__malloc_unlock>:
 8000a88:	4801      	ldr	r0, [pc, #4]	; (8000a90 <__malloc_unlock+0x8>)
 8000a8a:	f7ff bf09 	b.w	80008a0 <__retarget_lock_release_recursive>
 8000a8e:	bf00      	nop
 8000a90:	200001bc 	.word	0x200001bc

08000a94 <__sflush_r>:
 8000a94:	898a      	ldrh	r2, [r1, #12]
 8000a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a9a:	4605      	mov	r5, r0
 8000a9c:	0710      	lsls	r0, r2, #28
 8000a9e:	460c      	mov	r4, r1
 8000aa0:	d458      	bmi.n	8000b54 <__sflush_r+0xc0>
 8000aa2:	684b      	ldr	r3, [r1, #4]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	dc05      	bgt.n	8000ab4 <__sflush_r+0x20>
 8000aa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	dc02      	bgt.n	8000ab4 <__sflush_r+0x20>
 8000aae:	2000      	movs	r0, #0
 8000ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ab6:	2e00      	cmp	r6, #0
 8000ab8:	d0f9      	beq.n	8000aae <__sflush_r+0x1a>
 8000aba:	2300      	movs	r3, #0
 8000abc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000ac0:	682f      	ldr	r7, [r5, #0]
 8000ac2:	6a21      	ldr	r1, [r4, #32]
 8000ac4:	602b      	str	r3, [r5, #0]
 8000ac6:	d032      	beq.n	8000b2e <__sflush_r+0x9a>
 8000ac8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000aca:	89a3      	ldrh	r3, [r4, #12]
 8000acc:	075a      	lsls	r2, r3, #29
 8000ace:	d505      	bpl.n	8000adc <__sflush_r+0x48>
 8000ad0:	6863      	ldr	r3, [r4, #4]
 8000ad2:	1ac0      	subs	r0, r0, r3
 8000ad4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ad6:	b10b      	cbz	r3, 8000adc <__sflush_r+0x48>
 8000ad8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ada:	1ac0      	subs	r0, r0, r3
 8000adc:	2300      	movs	r3, #0
 8000ade:	4602      	mov	r2, r0
 8000ae0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ae2:	6a21      	ldr	r1, [r4, #32]
 8000ae4:	4628      	mov	r0, r5
 8000ae6:	47b0      	blx	r6
 8000ae8:	1c43      	adds	r3, r0, #1
 8000aea:	89a3      	ldrh	r3, [r4, #12]
 8000aec:	d106      	bne.n	8000afc <__sflush_r+0x68>
 8000aee:	6829      	ldr	r1, [r5, #0]
 8000af0:	291d      	cmp	r1, #29
 8000af2:	d82b      	bhi.n	8000b4c <__sflush_r+0xb8>
 8000af4:	4a29      	ldr	r2, [pc, #164]	; (8000b9c <__sflush_r+0x108>)
 8000af6:	410a      	asrs	r2, r1
 8000af8:	07d6      	lsls	r6, r2, #31
 8000afa:	d427      	bmi.n	8000b4c <__sflush_r+0xb8>
 8000afc:	2200      	movs	r2, #0
 8000afe:	6062      	str	r2, [r4, #4]
 8000b00:	04d9      	lsls	r1, r3, #19
 8000b02:	6922      	ldr	r2, [r4, #16]
 8000b04:	6022      	str	r2, [r4, #0]
 8000b06:	d504      	bpl.n	8000b12 <__sflush_r+0x7e>
 8000b08:	1c42      	adds	r2, r0, #1
 8000b0a:	d101      	bne.n	8000b10 <__sflush_r+0x7c>
 8000b0c:	682b      	ldr	r3, [r5, #0]
 8000b0e:	b903      	cbnz	r3, 8000b12 <__sflush_r+0x7e>
 8000b10:	6560      	str	r0, [r4, #84]	; 0x54
 8000b12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b14:	602f      	str	r7, [r5, #0]
 8000b16:	2900      	cmp	r1, #0
 8000b18:	d0c9      	beq.n	8000aae <__sflush_r+0x1a>
 8000b1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	d002      	beq.n	8000b28 <__sflush_r+0x94>
 8000b22:	4628      	mov	r0, r5
 8000b24:	f7ff febe 	bl	80008a4 <_free_r>
 8000b28:	2000      	movs	r0, #0
 8000b2a:	6360      	str	r0, [r4, #52]	; 0x34
 8000b2c:	e7c0      	b.n	8000ab0 <__sflush_r+0x1c>
 8000b2e:	2301      	movs	r3, #1
 8000b30:	4628      	mov	r0, r5
 8000b32:	47b0      	blx	r6
 8000b34:	1c41      	adds	r1, r0, #1
 8000b36:	d1c8      	bne.n	8000aca <__sflush_r+0x36>
 8000b38:	682b      	ldr	r3, [r5, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0c5      	beq.n	8000aca <__sflush_r+0x36>
 8000b3e:	2b1d      	cmp	r3, #29
 8000b40:	d001      	beq.n	8000b46 <__sflush_r+0xb2>
 8000b42:	2b16      	cmp	r3, #22
 8000b44:	d101      	bne.n	8000b4a <__sflush_r+0xb6>
 8000b46:	602f      	str	r7, [r5, #0]
 8000b48:	e7b1      	b.n	8000aae <__sflush_r+0x1a>
 8000b4a:	89a3      	ldrh	r3, [r4, #12]
 8000b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b50:	81a3      	strh	r3, [r4, #12]
 8000b52:	e7ad      	b.n	8000ab0 <__sflush_r+0x1c>
 8000b54:	690f      	ldr	r7, [r1, #16]
 8000b56:	2f00      	cmp	r7, #0
 8000b58:	d0a9      	beq.n	8000aae <__sflush_r+0x1a>
 8000b5a:	0793      	lsls	r3, r2, #30
 8000b5c:	680e      	ldr	r6, [r1, #0]
 8000b5e:	bf08      	it	eq
 8000b60:	694b      	ldreq	r3, [r1, #20]
 8000b62:	600f      	str	r7, [r1, #0]
 8000b64:	bf18      	it	ne
 8000b66:	2300      	movne	r3, #0
 8000b68:	eba6 0807 	sub.w	r8, r6, r7
 8000b6c:	608b      	str	r3, [r1, #8]
 8000b6e:	f1b8 0f00 	cmp.w	r8, #0
 8000b72:	dd9c      	ble.n	8000aae <__sflush_r+0x1a>
 8000b74:	6a21      	ldr	r1, [r4, #32]
 8000b76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000b78:	4643      	mov	r3, r8
 8000b7a:	463a      	mov	r2, r7
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	47b0      	blx	r6
 8000b80:	2800      	cmp	r0, #0
 8000b82:	dc06      	bgt.n	8000b92 <__sflush_r+0xfe>
 8000b84:	89a3      	ldrh	r3, [r4, #12]
 8000b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b8a:	81a3      	strh	r3, [r4, #12]
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	e78e      	b.n	8000ab0 <__sflush_r+0x1c>
 8000b92:	4407      	add	r7, r0
 8000b94:	eba8 0800 	sub.w	r8, r8, r0
 8000b98:	e7e9      	b.n	8000b6e <__sflush_r+0xda>
 8000b9a:	bf00      	nop
 8000b9c:	dfbffffe 	.word	0xdfbffffe

08000ba0 <_fflush_r>:
 8000ba0:	b538      	push	{r3, r4, r5, lr}
 8000ba2:	690b      	ldr	r3, [r1, #16]
 8000ba4:	4605      	mov	r5, r0
 8000ba6:	460c      	mov	r4, r1
 8000ba8:	b913      	cbnz	r3, 8000bb0 <_fflush_r+0x10>
 8000baa:	2500      	movs	r5, #0
 8000bac:	4628      	mov	r0, r5
 8000bae:	bd38      	pop	{r3, r4, r5, pc}
 8000bb0:	b118      	cbz	r0, 8000bba <_fflush_r+0x1a>
 8000bb2:	6a03      	ldr	r3, [r0, #32]
 8000bb4:	b90b      	cbnz	r3, 8000bba <_fflush_r+0x1a>
 8000bb6:	f7ff fc8f 	bl	80004d8 <__sinit>
 8000bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d0f3      	beq.n	8000baa <_fflush_r+0xa>
 8000bc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000bc4:	07d0      	lsls	r0, r2, #31
 8000bc6:	d404      	bmi.n	8000bd2 <_fflush_r+0x32>
 8000bc8:	0599      	lsls	r1, r3, #22
 8000bca:	d402      	bmi.n	8000bd2 <_fflush_r+0x32>
 8000bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000bce:	f7ff fe66 	bl	800089e <__retarget_lock_acquire_recursive>
 8000bd2:	4628      	mov	r0, r5
 8000bd4:	4621      	mov	r1, r4
 8000bd6:	f7ff ff5d 	bl	8000a94 <__sflush_r>
 8000bda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000bdc:	07da      	lsls	r2, r3, #31
 8000bde:	4605      	mov	r5, r0
 8000be0:	d4e4      	bmi.n	8000bac <_fflush_r+0xc>
 8000be2:	89a3      	ldrh	r3, [r4, #12]
 8000be4:	059b      	lsls	r3, r3, #22
 8000be6:	d4e1      	bmi.n	8000bac <_fflush_r+0xc>
 8000be8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000bea:	f7ff fe59 	bl	80008a0 <__retarget_lock_release_recursive>
 8000bee:	e7dd      	b.n	8000bac <_fflush_r+0xc>

08000bf0 <__swhatbuf_r>:
 8000bf0:	b570      	push	{r4, r5, r6, lr}
 8000bf2:	460c      	mov	r4, r1
 8000bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	b096      	sub	sp, #88	; 0x58
 8000bfc:	4615      	mov	r5, r2
 8000bfe:	461e      	mov	r6, r3
 8000c00:	da0d      	bge.n	8000c1e <__swhatbuf_r+0x2e>
 8000c02:	89a3      	ldrh	r3, [r4, #12]
 8000c04:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000c08:	f04f 0100 	mov.w	r1, #0
 8000c0c:	bf0c      	ite	eq
 8000c0e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000c12:	2340      	movne	r3, #64	; 0x40
 8000c14:	2000      	movs	r0, #0
 8000c16:	6031      	str	r1, [r6, #0]
 8000c18:	602b      	str	r3, [r5, #0]
 8000c1a:	b016      	add	sp, #88	; 0x58
 8000c1c:	bd70      	pop	{r4, r5, r6, pc}
 8000c1e:	466a      	mov	r2, sp
 8000c20:	f000 f848 	bl	8000cb4 <_fstat_r>
 8000c24:	2800      	cmp	r0, #0
 8000c26:	dbec      	blt.n	8000c02 <__swhatbuf_r+0x12>
 8000c28:	9901      	ldr	r1, [sp, #4]
 8000c2a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000c2e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000c32:	4259      	negs	r1, r3
 8000c34:	4159      	adcs	r1, r3
 8000c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c3a:	e7eb      	b.n	8000c14 <__swhatbuf_r+0x24>

08000c3c <__smakebuf_r>:
 8000c3c:	898b      	ldrh	r3, [r1, #12]
 8000c3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000c40:	079d      	lsls	r5, r3, #30
 8000c42:	4606      	mov	r6, r0
 8000c44:	460c      	mov	r4, r1
 8000c46:	d507      	bpl.n	8000c58 <__smakebuf_r+0x1c>
 8000c48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000c4c:	6023      	str	r3, [r4, #0]
 8000c4e:	6123      	str	r3, [r4, #16]
 8000c50:	2301      	movs	r3, #1
 8000c52:	6163      	str	r3, [r4, #20]
 8000c54:	b002      	add	sp, #8
 8000c56:	bd70      	pop	{r4, r5, r6, pc}
 8000c58:	ab01      	add	r3, sp, #4
 8000c5a:	466a      	mov	r2, sp
 8000c5c:	f7ff ffc8 	bl	8000bf0 <__swhatbuf_r>
 8000c60:	9900      	ldr	r1, [sp, #0]
 8000c62:	4605      	mov	r5, r0
 8000c64:	4630      	mov	r0, r6
 8000c66:	f7ff fe89 	bl	800097c <_malloc_r>
 8000c6a:	b948      	cbnz	r0, 8000c80 <__smakebuf_r+0x44>
 8000c6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c70:	059a      	lsls	r2, r3, #22
 8000c72:	d4ef      	bmi.n	8000c54 <__smakebuf_r+0x18>
 8000c74:	f023 0303 	bic.w	r3, r3, #3
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	81a3      	strh	r3, [r4, #12]
 8000c7e:	e7e3      	b.n	8000c48 <__smakebuf_r+0xc>
 8000c80:	89a3      	ldrh	r3, [r4, #12]
 8000c82:	6020      	str	r0, [r4, #0]
 8000c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c88:	81a3      	strh	r3, [r4, #12]
 8000c8a:	9b00      	ldr	r3, [sp, #0]
 8000c8c:	6163      	str	r3, [r4, #20]
 8000c8e:	9b01      	ldr	r3, [sp, #4]
 8000c90:	6120      	str	r0, [r4, #16]
 8000c92:	b15b      	cbz	r3, 8000cac <__smakebuf_r+0x70>
 8000c94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c98:	4630      	mov	r0, r6
 8000c9a:	f000 f81d 	bl	8000cd8 <_isatty_r>
 8000c9e:	b128      	cbz	r0, 8000cac <__smakebuf_r+0x70>
 8000ca0:	89a3      	ldrh	r3, [r4, #12]
 8000ca2:	f023 0303 	bic.w	r3, r3, #3
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	81a3      	strh	r3, [r4, #12]
 8000cac:	89a3      	ldrh	r3, [r4, #12]
 8000cae:	431d      	orrs	r5, r3
 8000cb0:	81a5      	strh	r5, [r4, #12]
 8000cb2:	e7cf      	b.n	8000c54 <__smakebuf_r+0x18>

08000cb4 <_fstat_r>:
 8000cb4:	b538      	push	{r3, r4, r5, lr}
 8000cb6:	4d07      	ldr	r5, [pc, #28]	; (8000cd4 <_fstat_r+0x20>)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	4604      	mov	r4, r0
 8000cbc:	4608      	mov	r0, r1
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	602b      	str	r3, [r5, #0]
 8000cc2:	f7ff faf4 	bl	80002ae <_fstat>
 8000cc6:	1c43      	adds	r3, r0, #1
 8000cc8:	d102      	bne.n	8000cd0 <_fstat_r+0x1c>
 8000cca:	682b      	ldr	r3, [r5, #0]
 8000ccc:	b103      	cbz	r3, 8000cd0 <_fstat_r+0x1c>
 8000cce:	6023      	str	r3, [r4, #0]
 8000cd0:	bd38      	pop	{r3, r4, r5, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200001b8 	.word	0x200001b8

08000cd8 <_isatty_r>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	4d06      	ldr	r5, [pc, #24]	; (8000cf4 <_isatty_r+0x1c>)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4608      	mov	r0, r1
 8000ce2:	602b      	str	r3, [r5, #0]
 8000ce4:	f7ff faf3 	bl	80002ce <_isatty>
 8000ce8:	1c43      	adds	r3, r0, #1
 8000cea:	d102      	bne.n	8000cf2 <_isatty_r+0x1a>
 8000cec:	682b      	ldr	r3, [r5, #0]
 8000cee:	b103      	cbz	r3, 8000cf2 <_isatty_r+0x1a>
 8000cf0:	6023      	str	r3, [r4, #0]
 8000cf2:	bd38      	pop	{r3, r4, r5, pc}
 8000cf4:	200001b8 	.word	0x200001b8

08000cf8 <_sbrk_r>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	4d06      	ldr	r5, [pc, #24]	; (8000d14 <_sbrk_r+0x1c>)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4608      	mov	r0, r1
 8000d02:	602b      	str	r3, [r5, #0]
 8000d04:	f7ff fafc 	bl	8000300 <_sbrk>
 8000d08:	1c43      	adds	r3, r0, #1
 8000d0a:	d102      	bne.n	8000d12 <_sbrk_r+0x1a>
 8000d0c:	682b      	ldr	r3, [r5, #0]
 8000d0e:	b103      	cbz	r3, 8000d12 <_sbrk_r+0x1a>
 8000d10:	6023      	str	r3, [r4, #0]
 8000d12:	bd38      	pop	{r3, r4, r5, pc}
 8000d14:	200001b8 	.word	0x200001b8

08000d18 <_init>:
 8000d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d1a:	bf00      	nop
 8000d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d1e:	bc08      	pop	{r3}
 8000d20:	469e      	mov	lr, r3
 8000d22:	4770      	bx	lr

08000d24 <_fini>:
 8000d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d26:	bf00      	nop
 8000d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d2a:	bc08      	pop	{r3}
 8000d2c:	469e      	mov	lr, r3
 8000d2e:	4770      	bx	lr
